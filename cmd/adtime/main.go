package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"pompon-bot-golang/internal/config"
	"pompon-bot-golang/internal/handlers"
	"pompon-bot-golang/internal/models"
	"pompon-bot-golang/internal/services"
	"pompon-bot-golang/internal/utils"
	"syscall"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var logger *log.Logger

func init() {
	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	logger = utils.CreateLogger("bot.log", utils.LoggerConfig{
		Prefix: "ADTIME-BOT",
		Level:  utils.LevelInfo,
	})
}

func main() {
	utils.LogInfo(logger, "–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.LoadConfig()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db := config.ConnectDB(cfg)
	defer db.Close()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot API
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramAPIKey)
	if err != nil {
		utils.LogError(logger, fmt.Sprintf("Failed to initialize bot: %v", err))
		os.Exit(1)
	}

	bot.Debug = true
	utils.LogInfo(logger, fmt.Sprintf("Authorized on account %s", bot.Self.UserName))

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	catalogService := services.NewCatalogService(db)
	orderService := services.NewOrderService(db) // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ NewOrderService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	notifyService := services.NewNotifyService(db, bot)
	subscribeService := services.NewSubscribeService(db)

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)

	// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	done := make(chan struct{})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		u := tgbotapi.NewUpdate(0)
		u.Timeout = 60
		updates := bot.GetUpdatesChan(u)

		for update := range updates {
			if update.Message != nil {
				if update.Message.IsCommand() {
					switch update.Message.Command() {
					case "start":
						handlers.HandleStart(update, bot)
					case "about":
						handlers.HandleAbout(update, bot)
					case "catalog":
						handlers.HandleCatalog(catalogService, bot, update.Message.Chat.ID)
					case "order":
						handlers.HandleOrder(orderService, bot, update)
					case "subscribe":
						handlers.HandleSubscribe(subscribeService, bot, update.Message.Chat.ID)
					default:
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
						bot.Send(msg)
					}
				} else {
					// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
					switch update.Message.Text {
					case "üîπ –û –Ω–∞—Å", "üîπ About Us":
						handlers.HandleAbout(update, bot)
					case "üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üì¶ Catalog":
						handlers.HandleCatalog(catalogService, bot, update.Message.Chat.ID)
					case "üõí –ó–∞–∫–∞–∑–∞—Ç—å", "üõí Order":
						handlers.HandleOrder(orderService, bot, update)
					case "üîî –ü–æ–¥–ø–∏—Å–∫–∞", "üîî Subscription":
						handlers.HandleSubscribe(subscribeService, bot, update.Message.Chat.ID)
					default:
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
						bot.Send(msg)
					}
				}

				// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≥–æ—Ä—É—Ç–∏–Ω—ã
				if update.Message.Text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å" {
					order := models.Order{
						UserID:   update.Message.Chat.ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						Product:  models.Product{ID: 1},
						Quantity: 2,
						Status:   "pending",
					}

					if err := orderService.CreateOrder(context.Background(), order.UserID, order); err != nil {
						utils.LogError(logger, fmt.Sprintf("Failed to create order: %v", err))
					} else {
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
						message := fmt.Sprintf("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: %s, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d", order.Product.Name, order.Quantity)
						if err := notifyService.NotifyAllSubscribers(context.Background(), message); err != nil {
							utils.LogError(logger, fmt.Sprintf("Failed to notify subscribers: %v", err))
						}
					}
				}

			} else if update.CallbackQuery != nil {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
				handlers.HandleCallbackQuery(db, bot, update.CallbackQuery)
			}
		}
		done <- struct{}{}
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-stop
	utils.LogInfo(logger, "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –∑–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞...")

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	<-done
	utils.LogInfo(logger, "–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
}
