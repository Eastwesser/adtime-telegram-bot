package handlers

import (
	"context"
	"database/sql"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"pompon-bot-golang/internal/services"
	"strings"
)

// HandleSubscribe –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscribe
func HandleSubscribe(subscribeService *services.SubscribeService, bot *tgbotapi.BotAPI, chatID int64) {
	ctx := context.Background()

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É subscribers
	err := subscribeService.AddSubscriber(ctx, chatID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üì©")
	bot.Send(msg)
}

// HandleUnsubscribe –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∫—É
func HandleUnsubscribe(subscribeService *services.SubscribeService, bot *tgbotapi.BotAPI, chatID int64) {
	ctx := context.Background()
	err := subscribeService.RemoveSubscriber(ctx, chatID)

	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}
	msg := tgbotapi.NewMessage(chatID, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. ‚ùå")
	bot.Send(msg)
}

func notifySubscribers(bot *tgbotapi.BotAPI, db *sql.DB, message string) {
	rows, err := db.Query("SELECT telegram_id FROM subscribers")
	if err != nil {
		log.Println("Failed to get subscribers:", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var chatID int64
		if err := rows.Scan(&chatID); err != nil {
			log.Println("Failed to scan subscriber:", err)
			continue
		}

		_, err := bot.Send(tgbotapi.NewMessage(chatID, message))
		if err != nil {
			log.Printf("Failed to send message to subscriber %d: %v\n", chatID, err)
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
			if strings.Contains(err.Error(), "chat not found") {
				// –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
				_, err := db.Exec("DELETE FROM subscribers WHERE telegram_id = $1", chatID)
				if err != nil {
					log.Println("Failed to delete subscriber:", err)
				} else {
					log.Println("Subscriber deleted:", chatID)
				}
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ö–æ–¥–∞ rows
	if err := rows.Err(); err != nil {
		log.Println("Error iterating over rows:", err)
	}
}
